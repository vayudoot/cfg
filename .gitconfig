[user]
	name = NT
	email = ntrivedi@gmail.com
[github]
    user = ntrivedi
    # in a few months, look into the include directive (after bug fixes)
    token = MOVEALONG
[color]
	ui = auto
	# diff = auto
	# status = auto
	# branch = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[advice]
    statusHints = false
[gui]
	fontdiff = -family Monaco -size 10 -weight normal -slant roman -underline 0 -overstrike 0
[core]
	excludesfile = /Users/nishank/.gitignore_global
	quotepath = false
	autocrlf = input
	safecrlf = warn
	editor = vim
[alias]
	# most commonly used
	co = checkout
	d = diff --color-words
	cam = commit -a -m
	upm = !git fetch upstream && git merge upstream/master
	dfxn = !git -dfnx
	dfx = !git -dfx

	# log related
	cl   = log --stat -C -2
	lp   = log -p
    lod  = log --oneline --decorate
	lf   = log --pretty=fuller
	lg   = log --graph
	lgg  = log --graph --abbrev-commit --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Creset'
	l2   = log --graph --all --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative
	lpo  = log --graph --all --abbrev-commit --decorate --pretty=oneline
	l1   = log --graph --all --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --date=relative
	slog = log --graph --all --abbrev-commit --simplify-by-decoration --pretty=oneline
	lgso = log --graph --date=short --pretty=format:'%C(yellow)%h%Creset %cn%x09%cd %s%C(green bold)%d'
	lol  = log --graph --all --abbrev-commit --pretty=oneline
	l    = log --stat -C
	ll   = log --stat -C -3
	who  = shortlog -s --
	busypeople = shortlog -6
	busythisweek = shortlog --since=one.week.ago
	logr = log -M
	lsm  = log --stat -M
	lsm2 = log --stat -M -2
	ls5  = log --stat -5
	lsc  = log --stat -C
	logn = log --oneline --name-only
	listhistory = log --name-statusHints

	# stash related
	sl = stash list
	sa = stash apply
	sp = stash pop
	sh = stash show
    scount = !git stash list | wc -l 2>/dev/null | grep -oEi '[0-9][0-9]*'

	# least used
	br = branch -a
	s = status -s -u
	c = commit
	dh = diff HEAD
	dc = diff --staged
	dw = diff --word-diff
	dcw = diff --color-words
	dm = !git diff | subl
	dv = !git diff | vim
	ph = push
	pl = pull
	spull = !git-svn fetch && git-svn rebase
	spush = !git-svn dcommit
	sync = !git pull && git push
	es = !git pull --rebase && git push
	ignorechanges = update-index --assume-unchanged
	noticechanges = update-index --no-assume-unchanged
	gc-ap = gc --aggressive --prune
	listconf = config --global --list
	diffall = diff HEAD
	scrub = !git reset --hard && git clean -fd
	pub = !git pub checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf
	cs = status
	rv = remote -v
	pur = pull --rebase
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
	orphank = !gitk --all `git reflog | cut -c1-7`&
	orphanl = !git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`
	k = !exec gitk --all&
	testecho1 = !sh -c 'echo with slash: zero=$0 one=$1 two=$2' -
	# te1 RESULT: with slash: zero=- one=A two=B
	testecho2 = !sh -c 'echo without slash: zero=$0 one=$1 two=$2'
	# te2 RESULT: without slash: zero=A one=B two=C
	st = status
	servehere = daemon --verbose --informative-errors --reuseaddr --export-all --base-path=. --enable=receive-pack
	purgeme = !git clean -fd && git reset --hard
	prunenow = gc --prune=now
	ri = rebase --interactive --autosquash
	ro = !git fetch origin && git reset --hard origin/master
	shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
	pushnotes = !sh -c 'git push $1 refs/notes/*' -
	fetchnotes = !sh -c 'git fetch $1 refs/notes/*:refs/notes/*' -
	showignored = clean -ndX
	showignored2 = ls-files --others --ignored --exclude-standard
	showuntracked = ls-files --others --exclude-standard
	rmmissing = !git rm $(git ls-files --deleted)
	mergekeepoursonly = merge -s ours
	redocommit = reset --soft HEAD^
	listunstaged = diff --name-status
	liststaged = diff --name-status --staged
	configpushtracking = config push.default tracking
	configpushnothing = config push.default nothing
	configpushmatching = config push.default matching
	configpushcurrent = config push.default current

	nr = "!sh -c 'git init $0'"
	echoparam1 = "!sh -c 'echo $0'"
	#testshfunction = "!function gitme() { git init $1; cd $1; }; gitme"

	fixup = "!sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
	squash = "!sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
	ccfq = "!sh -c 'git add $1 && git commit -m\"Placeholder\"' -"
	cob = checkout -b
	sno = show --name-only

[apply]
	whitespace = nowarn
#Enable the recording of resolved conflicts, so that identical hunks can be resolved automatically later on
[rerere]
	enabled = 1
[difftool]
	prompt = false
[diff]
	tool = tkdiff
[init]
    #templatedir = ~/.dotfiles/.git_template
[mergetool]
	prompt = false
	keepBackup = false
[difftool "diffmerge"]
	cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
[mergetool "diffmerge"]
	cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
	trustExitCode = true
[merge]
	tool = tkdiff
	stat = true
[branch]
    # Automatically set up pull to be --rebase
    autosetuprebase = always
[credential]
	helper = cache
[filter "tabspace"]
	clean = expand -t 4
[push]
	default = matching
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
