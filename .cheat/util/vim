# customization
,               leader (default is \)
,*              replace word under cursor
,<sp>           strip trailing whitespaces

# File management
:e              reload file
:q              quit
:q!             quit without saving changes
:w              write file
:w {file}       write new file
:x              write file and exit

[count][operator][text object / motion]
# Operators
u               undo
ctrl-r          redo
c               change
~               swap case
gu/gU           make lower/upper case
>               indent
yy              yank (copy) a line
y{motion}       yank text that {motion} moves over
p               paste after cursor
P               paste before cursor
<Del> or x      delete character under cursor
X               delete character just before cursor
dw              delete word from cursor until end of word
dd              delete a line
d{motion}       delete text that {motion} moves over
f               find

# Motion
    k
  h   l         basic motion
    j
prepent [count] in any of following
w               next start of word
W               next start of whitespace-delimited word
e               next end of word
E               next end of whitespace-delimited word
b               previous start of word
B               previous start of whitespace-delimited word
0               start of line
$               end of line
gg              go to first line in file
G               go to end of file
gk              move down one displayed line
gj              move up one displayed line
%               match paren/bracket
]m              go to beginning of next method

# Text object
# x can be 'd', 'i' (inside, e.g. ci" = change inside "")"
xaw             'x' a word (x could be d - delete)
xap             'x' a paragraph
xab             'x' a block
xat             'x' a tag block
xi_             'x' inside whatever

# Buffers
:ls              list all buffers
:b <num>         switch to open buffer
:bd              delete current buffer
:bw              wipe current buffer
:2bd             delete second buffer

# marks
m{char}         mark a position with {char}
`{char}         jump to the {char} mark

# jumps
ctrl-O/ctrl-I   cycle through :jumps
g;/g,           cycle through changes
gd              go to local definition (with cursor on method name)
gf              go to file (with cursor on filename)

# Insertion
#   To exit from insert mode use Esc or Ctrl-C
#   Enter insertion mode and:
a               append after the cursor
A               append at the end of the line
i               insert before the cursor
I               insert at the beginning of the line
o               create a new line under the cursor
O               create a new line above the cursor
R               enter insert mode but replace instead of inserting chars
:r {file}       insert from file

# Search and replace with the `:substitute` (aka `:s`) command
:s/foo/bar/ replace the first match of 'foo' with 'bar' on the current line only
:s/foo/bar/g    replace all matches (`g` flag) of 'foo' with 'bar' on the current line only
:L1,L2s/foo/bar/g replace all matches of foo with bar from line L1 to L2 only
:%s/foo/bar/g   replace all matches of 'foo' with 'bar' in the entire file (`:%s`)
:%s/foo/bar/gc  ask to manually confirm (`c` flag) each replacement

# Preceding a motion or edition with a number repeats it 'n' times
# Examples:
50k         moves 50 lines up
2dw         deletes 2 words
5yy         copies 5 lines
42G         go to line 42

# Outside
.w !<cmd>   send current line to <cmd>. e,g, .w !zsh
:bo term    spawn a private term buffer at bottom
:vert term  spawn a private term buffer at side
:!zsh        spawn private term buffer

# Binding
q{char}          " record macro to register {character}
o                " insert empty line below cursor
esc              " cmd-mode
q                " end recording
#   Use @{char} to execute macro

# Buffer, windows, tabs
# Buffer => files, Window => view
:sp <file>      open new file in vertical split window
:vp <file>      open new file in horizontal split window
:30vs .         open 30char vertical split of current dir
:args **/*.cpp  add all local cpp files to args

# cscope
# Put http://cscope.sourceforge.net/cscope_maps.vim in .vim/plugin
:cscope add cscope_db

